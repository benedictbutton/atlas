// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  introMessage  Boolean?   @default(true)
  accounts      Account[]
  sessions      Session[]
  games         Game[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Country {
  id     String   @id @default(cuid())
  name   String
  Answer Answer[]

  @@unique([name])
}

model Answer {
  id          String   @id @default(cuid())
  value       Boolean?
  countryName String
  gameId      String?

  country Country @relation(fields: [countryName], references: [name])
  game    Game?   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Game {
  id      String   @id @default(cuid())
  userId  String
  answers Answer[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
